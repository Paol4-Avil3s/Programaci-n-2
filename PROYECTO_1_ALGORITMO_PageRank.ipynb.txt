{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "cell_execution_strategy": "setup"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dWG1c5K4Mo9H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "class Grafica:\n",
        "    \"\"\"\n",
        "    Clase base para representar una gráfica dirigida.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, nodos, enlaces):\n",
        "        \"\"\"\n",
        "        Inicializa la gráfica con nodos y enlaces.\n",
        "        :param nodos: Lista de nodos (páginas web).\n",
        "        :param enlaces: Lista de tuplas (i, j), donde i apunta a j.\n",
        "        \"\"\"\n",
        "        self.nodos = nodos\n",
        "        self.enlaces = enlaces\n",
        "        self.matriz_adyacencia = self._crear_matriz_adyacencia()\n",
        "\n",
        "    def _crear_matriz_adyacencia(self):\n",
        "        \"\"\"\n",
        "        Crea la matriz de adyacencia para la gráfica.\n",
        "        :return: Matriz de adyacencia como una lista de listas.\n",
        "        \"\"\"\n",
        "        n = len(self.nodos)\n",
        "        matriz = [[0] * n for _ in range(n)]\n",
        "        for i, j in self.enlaces:\n",
        "            matriz[i][j] = 1\n",
        "        return matriz\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"\n",
        "        Devuelve una representación legible de la gráfica.\n",
        "        \"\"\"\n",
        "        return f\"Gráfica con nodos: {self.nodos}\\nEnlaces: {self.enlaces}\"\n",
        "\n",
        "\n",
        "class Red(Grafica):\n",
        "    \"\"\"\n",
        "    Clase que hereda de Grafica y agrega funcionalidad específica para PageRank.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, nodos, enlaces):\n",
        "        super().__init__(nodos, enlaces)\n",
        "        self.n = len(nodos)\n",
        "        self.matriz_pesos = self._calcular_matriz_pesos()\n",
        "\n",
        "    def _calcular_matriz_pesos(self):\n",
        "        \"\"\"\n",
        "        Calcula la matriz de pesos normalizada para el algoritmo PageRank.\n",
        "        :return: Matriz de pesos como un arreglo de NumPy.\n",
        "        \"\"\"\n",
        "        n = self.n\n",
        "        matriz_pesos = np.zeros((n, n))\n",
        "        for i in range(n):\n",
        "            suma_enlaces = sum(self.matriz_adyacencia[i])\n",
        "            if suma_enlaces > 0:\n",
        "                for j in range(n):\n",
        "                    matriz_pesos[j][i] = self.matriz_adyacencia[i][j] / suma_enlaces\n",
        "        return matriz_pesos\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"\n",
        "        Representa la red con sus pesos.\n",
        "        \"\"\"\n",
        "        return f\"Red con matriz de pesos:\\n{self.matriz_pesos}\"\n",
        "\n",
        "\n",
        "class PageRank:\n",
        "    \"\"\"\n",
        "    Clase para implementar el algoritmo PageRank.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, red, d=0.85):\n",
        "        \"\"\"\n",
        "        Inicializa el PageRank con una red y un factor de amortiguamiento.\n",
        "        :param red: Objeto de la clase Red.\n",
        "        :param d: Factor de amortiguamiento (por defecto, 0.85).\n",
        "        \"\"\"\n",
        "        self.red = red\n",
        "        self.d = d\n",
        "        self.n = red.n\n",
        "\n",
        "    def calcular(self, iteraciones=100, tolerancia=1e-6):\n",
        "        \"\"\"\n",
        "        Calcula el vector PageRank usando iteración.\n",
        "        :param iteraciones: Máximo de iteraciones.\n",
        "        :param tolerancia: Tolerancia para la convergencia.\n",
        "        :return: Vector PageRank.\n",
        "        \"\"\"\n",
        "        vector = np.full(self.n, 1 / self.n)  # Vector inicial uniforme\n",
        "        matriz_pesos = self.red.matriz_pesos\n",
        "\n",
        "        for _ in range(iteraciones):\n",
        "            nuevo_vector = (1 - self.d) / self.n + self.d * np.dot(matriz_pesos, vector)\n",
        "            if np.linalg.norm(nuevo_vector - vector, 1) < tolerancia:\n",
        "                break\n",
        "            vector = nuevo_vector\n",
        "\n",
        "        return vector\n",
        "\n",
        "\n",
        "def cargar_datos():\n",
        "    \"\"\"\n",
        "    Carga los datos de la tabla en nodos y enlaces.\n",
        "    :return: Lista de nodos y enlaces.\n",
        "    \"\"\"\n",
        "    nodos = [\n",
        "        \"nytimes.com\", \"washingtonpost.com\", \"cnn.com\", \"foxnews.com\", \"forbes.com\",\n",
        "        \"bloomberg.com\", \"wsj.com\", \"huffpost.com\", \"businessinsider.com\", \"npr.org\",\n",
        "        \"techcrunch.com\", \"theverge.com\", \"reuters.com\", \"politico.com\", \"mashable.com\",\n",
        "        \"yandex.ru\", \"lenta.ru\", \"gazeta.ru\", \"ria.ru\", \"rbk.ru\", \"tass.ru\", \"iz.ru\",\n",
        "        \"kommersant.ru\", \"vedomosti.ru\", \"regnum.ru\", \"federalreserve.gov\"\n",
        "    ]\n",
        "\n",
        "    enlaces = [\n",
        "        (0, 1), (0, 6), (0, 10), (1, 0), (1, 3), (1, 5), (1, 8),\n",
        "        (2, 0), (2, 4), (2, 8), (2, 10), (3, 1), (3, 2), (3, 7),\n",
        "        (15, 16), (16, 17), (16, 19), (17, 15), (17, 18),\n",
        "        (19, 15), (20, 21), (21, 22), (22, 23), (23, 24)\n",
        "    ]\n",
        "\n",
        "    return nodos, enlaces\n",
        "\n",
        "\n",
        "def main():\n",
        "    \"\"\"\n",
        "    Función principal del programa. Crea la red, ejecuta PageRank y responde las preguntas.\n",
        "    \"\"\"\n",
        "    nodos, enlaces = cargar_datos()\n",
        "    red = Red(nodos, enlaces)\n",
        "\n",
        "    # Pregunta 1: Página más importante con vector inicial uniforme\n",
        "    pr = PageRank(red)\n",
        "    resultados = pr.calcular()\n",
        "    print(\"Pregunta 1: Página más importante con vector inicial uniforme\")\n",
        "    pagina_importante = nodos[np.argmax(resultados)]\n",
        "    print(f\"La página más importante es: {pagina_importante}\")\n",
        "    print(f\"Vector PageRank: {resultados}\\n\")\n",
        "\n",
        "    # Pregunta 2: Vector inicial con páginas `.ru`\n",
        "    print(\"Pregunta 2: Redefinir el vector inicial para páginas `.ru`\")\n",
        "    vector_ru = np.array([1 / 9 if \".ru\" in nodo else 0 for nodo in nodos])\n",
        "    print(f\"Vector inicial para páginas `.ru`: {vector_ru}\\n\")\n",
        "\n",
        "    # Pregunta 3: Ecuación modificada con valores de `d`\n",
        "    print(\"Pregunta 3: Resultados con valores d = [0.5, 0.85, 1]\")\n",
        "    for d in [0.5, 0.85, 1]:\n",
        "        pr = PageRank(red, d)\n",
        "        resultados = pr.calcular()\n",
        "        print(f\"Resultados con d={d}: {resultados}\\n\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "d88YWsNEM21A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Explicación paso a paso\n"
      ],
      "metadata": {
        "id": "il4YnDzaPFz4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np  # Se utiliza NumPy para manejar operaciones matriciales de forma eficiente.\n",
        "\n",
        "\n",
        "class Grafica:\n",
        "    \"\"\"\n",
        "    Clase base para representar una gráfica dirigida.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, nodos, enlaces):\n",
        "        \"\"\"\n",
        "        Inicializa la gráfica con nodos y enlaces.\n",
        "        :param nodos: Lista de nodos (páginas web).\n",
        "        :param enlaces: Lista de tuplas (i, j), donde i apunta a j.\n",
        "        \"\"\"\n",
        "        self.nodos = nodos  # Nodos representan las páginas web en la gráfica.\n",
        "        self.enlaces = enlaces  # Enlaces representan las conexiones entre páginas.\n",
        "        self.matriz_adyacencia = self._crear_matriz_adyacencia()  # Crea la matriz de adyacencia.\n",
        "\n",
        "    def _crear_matriz_adyacencia(self):\n",
        "        \"\"\"\n",
        "        Crea la matriz de adyacencia para la gráfica.\n",
        "        Cada fila representa una página y las columnas muestran qué páginas están enlazadas.\n",
        "        :return: Matriz de adyacencia como una lista de listas.\n",
        "        \"\"\"\n",
        "        n = len(self.nodos)  # Número total de nodos.\n",
        "        matriz = [[0] * n for _ in range(n)]  # Inicializa una matriz n x n con ceros.\n",
        "        for i, j in self.enlaces:  # Llena la matriz de adyacencia con los enlaces proporcionados.\n",
        "            matriz[i][j] = 1\n",
        "        return matriz\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"\n",
        "        Devuelve una representación legible de la gráfica.\n",
        "        Muestra los nodos y los enlaces.\n",
        "        \"\"\"\n",
        "        return f\"Gráfica con nodos: {self.nodos}\\nEnlaces: {self.enlaces}\"\n",
        "\n",
        "\n",
        "class Red(Grafica):\n",
        "    \"\"\"\n",
        "    Clase que hereda de Grafica y agrega funcionalidad específica para PageRank.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, nodos, enlaces):\n",
        "        \"\"\"\n",
        "        Inicializa la Red a partir de los nodos y enlaces.\n",
        "        \"\"\"\n",
        "        super().__init__(nodos, enlaces)  # Llama al constructor de la clase base.\n",
        "        self.n = len(nodos)  # Cantidad de nodos (páginas web).\n",
        "        self.matriz_pesos = self._calcular_matriz_pesos()  # Calcula la matriz de pesos.\n",
        "\n",
        "    def _calcular_matriz_pesos(self):\n",
        "        \"\"\"\n",
        "        Calcula la matriz de pesos normalizada para el algoritmo PageRank.\n",
        "        La matriz de pesos es una versión normalizada de la matriz de adyacencia.\n",
        "        :return: Matriz de pesos como un arreglo de NumPy.\n",
        "        \"\"\"\n",
        "        n = self.n  # Número de nodos.\n",
        "        matriz_pesos = np.zeros((n, n))  # Inicializa la matriz de pesos con ceros.\n",
        "        for i in range(n):\n",
        "            suma_enlaces = sum(self.matriz_adyacencia[i])  # Suma de enlaces salientes del nodo i.\n",
        "            if suma_enlaces > 0:  # Si el nodo tiene enlaces salientes.\n",
        "                for j in range(n):\n",
        "                    # Normaliza dividiendo cada enlace por la suma total de enlaces salientes.\n",
        "                    matriz_pesos[j][i] = self.matriz_adyacencia[i][j] / suma_enlaces\n",
        "        return matriz_pesos\n",
        "\n",
        "    def __str__(self):\n",
        "        \"\"\"\n",
        "        Representa la red con su matriz de pesos.\n",
        "        \"\"\"\n",
        "        return f\"Red con matriz de pesos:\\n{self.matriz_pesos}\"\n",
        "\n",
        "\n",
        "class PageRank:\n",
        "    \"\"\"\n",
        "    Clase para implementar el algoritmo PageRank.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, red, d=0.85):\n",
        "        \"\"\"\n",
        "        Inicializa el PageRank con una red y un factor de amortiguamiento.\n",
        "        :param red: Objeto de la clase Red.\n",
        "        :param d: Factor de amortiguamiento (por defecto, 0.85).\n",
        "        \"\"\"\n",
        "        self.red = red  # La red que contiene los nodos y enlaces.\n",
        "        self.d = d  # Factor de amortiguamiento, controla la influencia de los enlaces aleatorios.\n",
        "        self.n = red.n  # Cantidad de nodos en la red.\n",
        "\n",
        "    def calcular(self, iteraciones=100, tolerancia=1e-6):\n",
        "        \"\"\"\n",
        "        Calcula el vector PageRank usando iteración.\n",
        "        :param iteraciones: Máximo de iteraciones permitidas.\n",
        "        :param tolerancia: Tolerancia para la convergencia (diferencia mínima entre iteraciones).\n",
        "        :return: Vector PageRank que contiene la importancia de cada nodo.\n",
        "        \"\"\"\n",
        "        # Inicializa un vector uniforme (todos los nodos tienen la misma importancia inicial).\n",
        "        vector = np.full(self.n, 1 / self.n)\n",
        "        matriz_pesos = self.red.matriz_pesos  # Matriz de pesos calculada previamente.\n",
        "\n",
        "        for _ in range(iteraciones):\n",
        "            # Calcula el nuevo vector según la ecuación de PageRank.\n",
        "            nuevo_vector = (1 - self.d) / self.n + self.d * np.dot(matriz_pesos, vector)\n",
        "            # Comprueba si la diferencia entre iteraciones es menor que la tolerancia.\n",
        "            if np.linalg.norm(nuevo_vector - vector, 1) < tolerancia:\n",
        "                break\n",
        "            vector = nuevo_vector  # Actualiza el vector con los nuevos valores.\n",
        "\n",
        "        return vector\n",
        "\n",
        "\n",
        "def cargar_datos():\n",
        "    \"\"\"\n",
        "    Carga los datos de la tabla en nodos y enlaces.\n",
        "    :return: Lista de nodos y enlaces.\n",
        "    \"\"\"\n",
        "    nodos = [\n",
        "        \"nytimes.com\", \"washingtonpost.com\", \"cnn.com\", \"foxnews.com\", \"forbes.com\",\n",
        "        \"bloomberg.com\", \"wsj.com\", \"huffpost.com\", \"businessinsider.com\", \"npr.org\",\n",
        "        \"techcrunch.com\", \"theverge.com\", \"reuters.com\", \"politico.com\", \"mashable.com\",\n",
        "        \"yandex.ru\", \"lenta.ru\", \"gazeta.ru\", \"ria.ru\", \"rbk.ru\", \"tass.ru\", \"iz.ru\",\n",
        "        \"kommersant.ru\", \"vedomosti.ru\", \"regnum.ru\", \"federalreserve.gov\"\n",
        "    ]\n",
        "\n",
        "    enlaces = [\n",
        "        (0, 1), (0, 6), (0, 10), (1, 0), (1, 3), (1, 5), (1, 8),\n",
        "        (2, 0), (2, 4), (2, 8), (2, 10), (3, 1), (3, 2), (3, 7),\n",
        "        (15, 16), (16, 17), (16, 19), (17, 15), (17, 18),\n",
        "        (19, 15), (20, 21), (21, 22), (22, 23), (23, 24)\n",
        "    ]\n",
        "\n",
        "    return nodos, enlaces\n",
        "\n",
        "\n",
        "def main():\n",
        "    \"\"\"\n",
        "    Función principal del programa. Crea la red, ejecuta PageRank y responde las preguntas.\n",
        "    \"\"\"\n",
        "    # Cargar los datos desde la tabla.\n",
        "    nodos, enlaces = cargar_datos()\n",
        "    red = Red(nodos, enlaces)  # Crear una red con los nodos y enlaces.\n",
        "\n",
        "    # Pregunta 1: Página más importante con vector inicial uniforme.\n",
        "    pr = PageRank(red)\n",
        "    resultados = pr.calcular()\n",
        "    print(\"Pregunta 1: Página más importante con vector inicial uniforme\")\n",
        "    pagina_importante = nodos[np.argmax(resultados)]  # Encuentra el nodo con el mayor valor de PageRank.\n",
        "    print(f\"La página más importante es: {pagina_importante}\")\n",
        "    print(f\"Vector PageRank: {resultados}\\n\")\n",
        "\n",
        "    # Pregunta 2: Redefinir el vector inicial para páginas `.ru`.\n",
        "    print(\"Pregunta 2: Redefinir el vector inicial para páginas `.ru`\")\n",
        "    vector_ru = np.array([1 / 9 if \".ru\" in nodo else 0 for nodo in nodos])  # Solo páginas `.ru`.\n",
        "    print(f\"Vector inicial para páginas `.ru`: {vector_ru}\\n\")\n",
        "\n",
        "    # Pregunta 3: Ecuación modificada con valores de `d`.\n",
        "    print(\"Pregunta 3: Resultados con valores d = [0.5, 0.85, 1]\")\n",
        "    for d in [0.5, 0.85, 1]:\n",
        "        pr = PageRank(red, d)\n",
        "        resultados = pr.calcular()\n",
        "        print(f\"Resultados con d={d}: {resultados}\\n\")\n",
        "    print(\"Realizado por: Morales Avilés Cintia Paola.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "Eve--wmSPNFA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SxHreov6VXug"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aFd4k7koUsTB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}